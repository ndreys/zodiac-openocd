transport select jtag

source [find target/imx51.cfg]
# Helper for common memory read/modify/write procedures
source [find mem_helper.tcl]



# Set reset type
reset_config trst_and_srst srst_pulls_trst
# trst_open_drain srst_open_drain

# Run at 6 MHz
adapter_khz 100


$_TARGETNAME configure -event reset-init { imx51_babbabge_init }


proc disable_wdog { } {
     mwh 0x73f98000 0x30
}

proc apply_dcd { } {
     mww 0x73fa88a0 0x00000200
     mww 0x73fa850c 0x000020c5
     mww 0x73fa8510 0x000020c5
     mww 0x73fa883c 0x00000002
     mww 0x73fa8848 0x00000002
     mww 0x73fa84b8 0x000000e7
     mww 0x73fa84bc 0x00000045
     mww 0x73fa84c0 0x00000045
     mww 0x73fa84c4 0x00000045
     mww 0x73fa84c8 0x00000045
     mww 0x73fa8820 0x00000000
     mww 0x73fa84a4 0x00000003
     mww 0x73fa84a8 0x00000003
     mww 0x73fa84ac 0x000000e3
     mww 0x73fa84b0 0x000000e3
     mww 0x73fa84b4 0x000000e3
     mww 0x73fa84cc 0x000000e3
     mww 0x73fa84d0 0x000000e2
     mww 0x73fa882c 0x00000004
     mww 0x73fa88a4 0x00000004
     mww 0x73fa88ac 0x00000004
     mww 0x73fa88b8 0x00000004
     mww 0x83fd9000 0x82a20000
     mww 0x83fd9008 0x82a20000
     mww 0x83fd9010 0x000ad0d0
     mww 0x83fd9004 0x3f3584ab
     mww 0x83fd900c 0x3f3584ab
     mww 0x83fd9014 0x04008008
     mww 0x83fd9014 0x0000801a
     mww 0x83fd9014 0x0000801b
     mww 0x83fd9014 0x00448019
     mww 0x83fd9014 0x07328018
     mww 0x83fd9014 0x04008008
     mww 0x83fd9014 0x00008010
     mww 0x83fd9014 0x00008010
     mww 0x83fd9014 0x06328018
     mww 0x83fd9014 0x03808019
     mww 0x83fd9014 0x00408019
     mww 0x83fd9014 0x00008000
     mww 0x83fd9014 0x0400800c
     mww 0x83fd9014 0x0000801e
     mww 0x83fd9014 0x0000801f
     mww 0x83fd9014 0x0000801d
     mww 0x83fd9014 0x0732801c
     mww 0x83fd9014 0x0400800c
     mww 0x83fd9014 0x00008014
     mww 0x83fd9014 0x00008014
     mww 0x83fd9014 0x0632801c
     mww 0x83fd9014 0x0380801d
     mww 0x83fd9014 0x0040801d
     mww 0x83fd9014 0x00008004
     mww 0x83fd9000 0xb2a20000
     mww 0x83fd9008 0xb2a20000
     mww 0x83fd9010 0x000ad6d0
     mww 0x83fd9034 0x90000000
     mww 0x83fd9014 0x00000000
}

# L2CC Cache setup/invalidation/disable
proc init_l2cc { } {
	; #/* explicitly disable L2 cache */
	; #mrc 15, 0, r0, c1, c0, 1
	set tR [arm mrc 15 0 1 0 1]
	; #bic r0, r0, #0x2
	; #mcr 15, 0, r0, c1, c0, 1
	arm mcr 15 0 1 0 1 [expr $tR & ~(1<<2)]

	; #/* reconfigure L2 cache aux control reg */
	; #mov r0, #0xC0                   /* tag RAM */
	; #add r0, r0, #0x4                /* data RAM */
	; #orr r0, r0, #(1 << 24)          /* disable write allocate delay */
	; #orr r0, r0, #(1 << 23)          /* disable write allocate combine */
	; #orr r0, r0, #(1 << 22)          /* disable write allocate */

	; #mcr 15, 1, r0, c9, c0, 2
	arm mcr 15 1 9 0 2 [expr 0xC4 | (1<<24) | (1<<23) | (1<22)]
}


proc imx51_babbabge_init { } {
	echo "Reset-init..."
	; # halt the CPU
	halt

	dap apsel 1

	disable_wdog
	apply_dcd

	; # ARM errata ID #468414
	set tR [arm mrc 15 0 1 0 1]
	arm mcr 15 0 1 0 1 [expr $tR | (1<<5)]	; # enable L1NEON bit

	init_l2cc

	dap apsel 0

	; # Force ARM state
	; #reg cpsr 0x000001D3
	arm core_state arm
}


# vim:filetype=tcl
